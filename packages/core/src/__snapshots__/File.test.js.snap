// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`updateFileAst - edit file outside function 1`] = `
Object {
  "ast": Program 1:0-7:1 {
    "children": "undefined",
    "text": "let myVar = 'some string EDITED HERE'
    function myFunc (a) {
        function innerFunc () {
            return 'hello'
        }
        return a + innerFunc()
    }",
  },
  "findFunctionAroundCursor": [Function],
  "functions": Array [
    FunctionDeclaration 2:0-7:1 {
      "children": "[
          {
            children: [],
            customId: 2,
          },
        ]",
      "customId": 1,
      "fileId": "myFile0",
      "syntaxError": undefined,
      "text": "function myFunc(a) {
          function innerFunc () {
              return 'hello'
          }
          return a + innerFunc()
      }",
    },
    FunctionDeclaration 3:4-5:5 {
      "children": "[]",
      "customId": 2,
      "fileId": "myFile0",
      "syntaxError": undefined,
      "text": "function innerFunc() {
          return 'hello'
      }",
    },
  ],
  "functionsMap": Object {
    "1": FunctionDeclaration 2:0-7:1 {
      "children": "[
          {
            children: [],
            customId: 2,
          },
        ]",
      "customId": 1,
      "fileId": "myFile0",
      "syntaxError": undefined,
      "text": "function myFunc(a) {
          function innerFunc () {
              return 'hello'
          }
          return a + innerFunc()
      }",
    },
    "2": FunctionDeclaration 3:4-5:5 {
      "children": "[]",
      "customId": 2,
      "fileId": "myFile0",
      "syntaxError": undefined,
      "text": "function innerFunc() {
          return 'hello'
      }",
    },
  },
  "functionsTreeRoot(shortened)": Object {
    "children": "[
      {
        children: [
          {
            children: [],
            customId: 2,
          },
        ],
        customId: 1,
      },
    ]",
    "isRoot": true,
  },
  "getMetaData": [Function],
  "hasConnectedError": false,
  "id": "myFile0",
  "init": [Function],
  "setFunctions": [Function],
  "syntaxError": undefined,
  "text": "let myVar = 'some string EDITED HERE'
function myFunc (a) {
    function innerFunc () {
        return 'hello'
    }
    return a + innerFunc()
}",
  "unformattedText": "let myVar = 'some string EDITED HERE'
function myFunc (a) {
    function innerFunc () {
        return 'hello'
    }
    return a + innerFunc()
}",
  "updateFileAst": [Function],
  "updateFunctionAst": [Function],
}
`;

exports[`updateFileAst - edit outer function in file 1`] = `
Object {
  "ast": Program 1:0-7:1 {
    "children": "undefined",
    "text": "let myVar = 'some string'
    function myFunc (a) {
        function innerFunc () {
            return 'hello'
        }
        return a + innerFunc() + 'foooooooooo'
    }",
  },
  "findFunctionAroundCursor": [Function],
  "functions": Array [
    FunctionDeclaration 2:0-7:1 {
      "children": "[
          {
            children: [],
            customId: 2,
          },
        ]",
      "customId": 1,
      "fileId": "myFile0",
      "syntaxError": undefined,
      "text": "function myFunc(a) {
          function innerFunc () {
              return 'hello'
          }
          return a + innerFunc() + 'foooooooooo'
      }",
    },
    FunctionDeclaration 3:4-5:5 {
      "children": "[]",
      "customId": 2,
      "fileId": "myFile0",
      "syntaxError": undefined,
      "text": "function innerFunc() {
          return 'hello'
      }",
    },
  ],
  "functionsMap": Object {
    "1": FunctionDeclaration 2:0-7:1 {
      "children": "[
          {
            children: [],
            customId: 2,
          },
        ]",
      "customId": 1,
      "fileId": "myFile0",
      "syntaxError": undefined,
      "text": "function myFunc(a) {
          function innerFunc () {
              return 'hello'
          }
          return a + innerFunc() + 'foooooooooo'
      }",
    },
    "2": FunctionDeclaration 3:4-5:5 {
      "children": "[]",
      "customId": 2,
      "fileId": "myFile0",
      "syntaxError": undefined,
      "text": "function innerFunc() {
          return 'hello'
      }",
    },
  },
  "functionsTreeRoot(shortened)": Object {
    "children": "[
      {
        children: [
          {
            children: [],
            customId: 2,
          },
        ],
        customId: 1,
      },
    ]",
    "isRoot": true,
  },
  "getMetaData": [Function],
  "hasConnectedError": false,
  "id": "myFile0",
  "init": [Function],
  "setFunctions": [Function],
  "syntaxError": undefined,
  "text": "let myVar = 'some string'
function myFunc (a) {
    function innerFunc () {
        return 'hello'
    }
    return a + innerFunc() + 'foooooooooo'
}",
  "unformattedText": "let myVar = 'some string'
function myFunc (a) {
    function innerFunc () {
        return 'hello'
    }
    return a + innerFunc() + 'foooooooooo'
}",
  "updateFileAst": [Function],
  "updateFunctionAst": [Function],
}
`;

exports[`updateFileAst - edit with syntax error 1`] = `
Object {
  "ast": Program 1:0-7:1 {
    "children": "undefined",
    "text": "let myVar = 'some string'
    function myFunc (a) {
        function innerFunc () {
            return 'hello'
        }
        return a + innerFunc()
    }",
  },
  "findFunctionAroundCursor": [Function],
  "functions": Array [
    FunctionDeclaration 2:0-7:1 {
      "children": "[
          {
            children: [],
            customId: 2,
          },
        ]",
      "customId": 1,
      "fileId": "myFile0",
      "syntaxError": undefined,
      "text": "function myFunc(a) {
          function innerFunc() {
              return 'hello'
          }
          return a + innerFunc()
      }",
    },
    FunctionDeclaration 3:4-5:5 {
      "children": "[]",
      "customId": 2,
      "fileId": "myFile0",
      "syntaxError": undefined,
      "text": "function innerFunc() {
          return 'hello'
      }",
    },
  ],
  "functionsMap": Object {
    "1": FunctionDeclaration 2:0-7:1 {
      "children": "[
          {
            children: [],
            customId: 2,
          },
        ]",
      "customId": 1,
      "fileId": "myFile0",
      "syntaxError": undefined,
      "text": "function myFunc(a) {
          function innerFunc() {
              return 'hello'
          }
          return a + innerFunc()
      }",
    },
    "2": FunctionDeclaration 3:4-5:5 {
      "children": "[]",
      "customId": 2,
      "fileId": "myFile0",
      "syntaxError": undefined,
      "text": "function innerFunc() {
          return 'hello'
      }",
    },
  },
  "functionsTreeRoot(shortened)": Object {
    "children": "[
      {
        children: [
          {
            children: [],
            customId: 2,
          },
        ],
        customId: 1,
      },
    ]",
    "isRoot": true,
  },
  "getMetaData": [Function],
  "hasConnectedError": true,
  "id": "myFile0",
  "init": [Function],
  "setFunctions": [Function],
  "syntaxError": [SyntaxError: Unterminated string constant (1:12)],
  "text": "let myVar = 'some string'
function myFunc (a) {
    function innerFunc () {
        return 'hello'
    }
    return a + innerFunc()
}",
  "unformattedText": "let myVar = 'some string NO CLOSING QUOTE
function myFunc (a) {
    function innerFunc () {
        return 'hello'
    }
    return a + innerFunc()
}",
  "updateFileAst": [Function],
  "updateFunctionAst": [Function],
}
`;

exports[`updateFunctionAst - function with children 1`] = `
Object {
  "node": ArrowFunctionExpression 1:0-18:1 {
    "children": "[
        {
          children: [
            {
              children: [],
              customId: 4,
            },
          ],
          customId: 3,
        },
      ]",
    "customId": 2,
    "fileId": "myFile0",
    "syntaxError": undefined,
    "text": "() => {
        let name = 'Walterrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr'
    
        it('displays name', () => {
            function getTestName(a, b) {
                return a + b + name;
            }
    
            let myName = getTestName('I', 'Am', name);
            expect(<HelloComponent name={myName} />).contain('Hello IAmWalter!')
        })
    
        // function not recognized because not of a supported type
        it(\\"doesn't work without name\\", function () {
            let myName = undefined;
            expect(<HelloComponent name={myName} />).contain('Hello !')
        });
    }",
  },
  "nodesToUpdate": Array [
    ArrowFunctionExpression 4:24-11:5 {
      "children": "[
          {
            children: [],
            customId: 4,
          },
        ]",
      "customId": 3,
      "fileId": "myFile0",
      "syntaxError": undefined,
      "text": "() => {
          function getTestName(a, b) {
              return a + b + name;
          }
      
          let myName = getTestName('I', 'Am', name);
          expect(<HelloComponent name={myName} />).contain('Hello IAmWalter!')
      }",
    },
    FunctionDeclaration 5:8-7:9 {
      "children": "[]",
      "customId": 4,
      "fileId": "myFile0",
      "syntaxError": undefined,
      "text": "function getTestName(a, b) {
          return a + b + name;
      }",
    },
  ],
  "removedFunctions": undefined,
}
`;

exports[`updateFunctionAst - function with children 2`] = `
Object {
  "node": ArrowFunctionExpression 1:0-18:1 {
    "children": "[
        {
          children: [
            {
              children: [],
              customId: 4,
            },
          ],
          customId: 3,
        },
      ]",
    "customId": 2,
    "fileId": "myFile0",
    "syntaxError": [SyntaxError: Unterminated string constant (2:68)],
    "text": "() => {
        let name = 'Walterrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr'
    
        it('displays name', () => {
            function getTestName(a, b) {
                return a + b + name;
            }
    
            let myName = getTestName('I', 'Am', name);
            expect(<HelloComponent name={myName} />).contain('Hello IAmWalter!')
        })
    
        // function not recognized because not of a supported type
        it(\\"doesn't work without name\\", function () {
            let myName = undefined;
            expect(<HelloComponent name={myName} />).contain('Hello !')
        });
    }",
    "unformattedText": "() => {
        let name = 'Walterrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr' + 'foo
    
        it('displays name', () => {
            function getTestName(a, b) {
                return a + b + name;
            }
    
            let myName = getTestName('I', 'Am', name);
            expect(<HelloComponent name={myName} />).contain('Hello IAmWalter!')
        })
    
        // function not recognized because not of a supported type
        it(\\"doesn't work without name\\", function () {
            let myName = undefined;
            expect(<HelloComponent name={myName} />).contain('Hello !')
        });
    }",
  },
  "nodesToUpdate": Array [
    ArrowFunctionExpression 1:0-18:1 {
      "children": "[
          {
            children: [
              {
                children: [],
                customId: 4,
              },
            ],
            customId: 3,
          },
        ]",
      "customId": 2,
      "fileId": "myFile0",
      "syntaxError": [SyntaxError: Unterminated string constant (2:68)],
      "text": "() => {
          let name = 'Walterrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr'
      
          it('displays name', () => {
              function getTestName(a, b) {
                  return a + b + name;
              }
      
              let myName = getTestName('I', 'Am', name);
              expect(<HelloComponent name={myName} />).contain('Hello IAmWalter!')
          })
      
          // function not recognized because not of a supported type
          it(\\"doesn't work without name\\", function () {
              let myName = undefined;
              expect(<HelloComponent name={myName} />).contain('Hello !')
          });
      }",
      "unformattedText": "() => {
          let name = 'Walterrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr' + 'foo
      
          it('displays name', () => {
              function getTestName(a, b) {
                  return a + b + name;
              }
      
              let myName = getTestName('I', 'Am', name);
              expect(<HelloComponent name={myName} />).contain('Hello IAmWalter!')
          })
      
          // function not recognized because not of a supported type
          it(\\"doesn't work without name\\", function () {
              let myName = undefined;
              expect(<HelloComponent name={myName} />).contain('Hello !')
          });
      }",
    },
  ],
}
`;

exports[`updateFunctionAst - function with children 3`] = `
Object {
  "node": ArrowFunctionExpression 1:0-18:1 {
    "children": "[
        {
          children: [
            {
              children: [],
              customId: 4,
            },
          ],
          customId: 3,
        },
      ]",
    "customId": 2,
    "fileId": "myFile0",
    "syntaxError": undefined,
    "text": "() => {
        let name = 'Walterrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr' + 'foo';
    
        it('displays name', () => {
            function getTestName(a, b) {
                return a + b + name;
            }
    
            let myName = getTestName('I', 'Am', name);
            expect(<HelloComponent name={myName} />).contain('Hello IAmWalter!')
        })
    
        // function not recognized because not of a supported type
        it(\\"doesn't work without name\\", function () {
            let myName = undefined;
            expect(<HelloComponent name={myName} />).contain('Hello !')
        });
    }",
  },
  "nodesToUpdate": Array [
    ArrowFunctionExpression 4:24-11:5 {
      "children": "[
          {
            children: [],
            customId: 4,
          },
        ]",
      "customId": 3,
      "fileId": "myFile0",
      "syntaxError": undefined,
      "text": "() => {
          function getTestName(a, b) {
              return a + b + name;
          }
      
          let myName = getTestName('I', 'Am', name);
          expect(<HelloComponent name={myName} />).contain('Hello IAmWalter!')
      }",
    },
    FunctionDeclaration 5:8-7:9 {
      "children": "[]",
      "customId": 4,
      "fileId": "myFile0",
      "syntaxError": undefined,
      "text": "function getTestName(a, b) {
          return a + b + name;
      }",
    },
  ],
  "removedFunctions": undefined,
}
`;

exports[`updateFunctionAst - nested function 1`] = `
Object {
  "node": FunctionDeclaration 1:0-3:1 {
    "children": "[]",
    "customId": 4,
    "fileId": "myFile0",
    "syntaxError": undefined,
    "text": "function getTestName(a, b) {
        return a + b + name+'mytest';
    }",
  },
  "nodesToUpdate": Array [
    ArrowFunctionExpression 10:24-17:5 {
      "children": "[
          {
            children: [],
            customId: 4,
          },
        ]",
      "customId": 3,
      "fileId": "myFile0",
      "syntaxError": undefined,
      "text": "() => {
          function getTestName(a, b) {
              return a + b + name+'mytest';
          }
      
          let myName = getTestName('I', 'Am', name);
          expect(<HelloComponent name={myName} />).contain('Hello IAmWalter!')
      }",
    },
    ArrowFunctionExpression 7:27-24:1 {
      "children": "[
          {
            children: [
              {
                children: [],
                customId: 4,
              },
            ],
            customId: 3,
          },
        ]",
      "customId": 2,
      "fileId": "myFile0",
      "syntaxError": undefined,
      "text": "() => {
          let name = 'Walter';
      
          it('displays name', () => {
              function getTestName(a, b) {
                  return a + b + name+'mytest';
              }
      
              let myName = getTestName('I', 'Am', name);
              expect(<HelloComponent name={myName} />).contain('Hello IAmWalter!')
          })
      
          // function not recognized because not of a supported type
          it(\\"doesn't work without name\\", function () {
              let myName = undefined;
              expect(<HelloComponent name={myName} />).contain('Hello !')
          });
      }",
    },
  ],
  "removedFunctions": undefined,
}
`;

exports[`updateFunctionAst - nested function 2`] = `
Object {
  "node": FunctionDeclaration 1:0-3:1 {
    "children": "[]",
    "customId": 4,
    "fileId": "myFile0",
    "syntaxError": [SyntaxError: Unterminated string constant (2:37)],
    "text": "function getTestName(a, b) {
        return a + b + name+'mytest';
    }",
    "unformattedText": "function getTestName(a, b) {
        return a + b + name + 'mytest' + 'another;
    }",
  },
  "nodesToUpdate": Array [
    FunctionDeclaration 1:0-3:1 {
      "children": "[]",
      "customId": 4,
      "fileId": "myFile0",
      "syntaxError": [SyntaxError: Unterminated string constant (2:37)],
      "text": "function getTestName(a, b) {
          return a + b + name+'mytest';
      }",
      "unformattedText": "function getTestName(a, b) {
          return a + b + name + 'mytest' + 'another;
      }",
    },
  ],
}
`;

exports[`updateFunctionAst - nested function 3`] = `
Object {
  "node": FunctionDeclaration 1:0-3:1 {
    "children": "[]",
    "customId": 4,
    "fileId": "myFile0",
    "syntaxError": undefined,
    "text": "function getTestName(a, b) {
        return a + b + name + 'mytest' + 'another';
    }",
  },
  "nodesToUpdate": Array [
    ArrowFunctionExpression 10:24-17:5 {
      "children": "[
          {
            children: [],
            customId: 4,
          },
        ]",
      "customId": 3,
      "fileId": "myFile0",
      "syntaxError": undefined,
      "text": "() => {
          function getTestName(a, b) {
              return a + b + name + 'mytest' + 'another';
          }
      
          let myName = getTestName('I', 'Am', name);
          expect(<HelloComponent name={myName} />).contain('Hello IAmWalter!')
      }",
    },
    ArrowFunctionExpression 7:27-24:1 {
      "children": "[
          {
            children: [
              {
                children: [],
                customId: 4,
              },
            ],
            customId: 3,
          },
        ]",
      "customId": 2,
      "fileId": "myFile0",
      "syntaxError": undefined,
      "text": "() => {
          let name = 'Walter';
      
          it('displays name', () => {
              function getTestName(a, b) {
                  return a + b + name + 'mytest' + 'another';
              }
      
              let myName = getTestName('I', 'Am', name);
              expect(<HelloComponent name={myName} />).contain('Hello IAmWalter!')
          })
      
          // function not recognized because not of a supported type
          it(\\"doesn't work without name\\", function () {
              let myName = undefined;
              expect(<HelloComponent name={myName} />).contain('Hello !')
          });
      }",
    },
  ],
  "removedFunctions": undefined,
}
`;
